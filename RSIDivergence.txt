# RSI Divergence
# Drew Griffith

#hint: signal if the rsi is in a divergence using RSI Histogram.

declare lower;
input rsi_length = 14;
input ntrend = 60;
input ma_length = 60;
input rsi_OB = 20;
input rsi_OS = -20;

# global definitions
def hi = high;
def lo = low;
def cl = close;

def rsi = Round(RSI(length = rsi_length, price = cl), 1);
def rsi_ma = Round(ExpAverage(rsi, length = ma_length), 1);
plot diff = Round(rsi - rsi_ma, 0);
diff.SetPaintingStrategy(PaintingStrategy.HISTOGRAM);
diff.SetLineWeight(3);
diff.DefineColor("Positive and Up", Color.GREEN);
diff.DefineColor("Positive and Down", Color.DARK_GREEN);
diff.DefineColor("Negative and Down", Color.RED);
diff.DefineColor("Negative and Up", Color.DARK_RED);
diff.AssignValueColor(if diff >= 0 then if diff > diff[1] then diff.Color("Positive and Up") else diff.Color("Positive and Down") else if diff < diff[1] then diff.Color("Negative and Down") else diff.Color("Negative and Up"));
diff.AssignValueColor(if diff >= 0 then if diff > diff[1] then diff.Color("Positive and Up") else diff.Color("Positive and Down") else if diff < diff[1] then diff.Color("Negative and Down") else diff.Color("Negative and Up"));

# bearish divergence definitions
plot strat_hh = Round(Highest(diff, ntrend));  #round to nearest whole number
strat_hh.SetDefaultColor(Color.DARK_GRAY);
strat_hh.SetLineWeight(1);

# bullish divergence definitions
plot strat_ll = Round(Lowest(diff, ntrend));  #round to nearest whole number
strat_ll.SetDefaultColor(Color.DARK_GRAY);
strat_ll.SetLineWeight(1);

plot diff_high = rsi_OB;
diff_high.SetDefaultColor(Color.DARK_GRAY);
diff_high.SetLineWeight(1);
diff_high.Hide();
diff_high.HideTitle();

plot diff_low = rsi_OS;
diff_low.SetDefaultColor(Color.DARK_GRAY);
diff_low.SetLineWeight(1);
diff_low.Hide();
diff_low.HideTitle();

plot rsitrend_lin = Round(InertiaAll(diff, ntrend), 2);
rsitrend_lin.SetLineWeight(1);
rsitrend_lin.AssignValueColor(Color.GRAY);

script inertiaTS {
    input y = close;
    input n = 20;
    def x = x[1] + 1;
    def a = (n * Sum(x * y, n) - Sum(x, n) * Sum(y, n) ) / ( n * Sum(Sqr(x), n) - Sqr(Sum(x, n)));
    def b = (Sum(Sqr(x), n) * Sum(y, n) - Sum(x, n) * Sum(x * y, n) ) / ( n * Sum(Sqr(x), n) - Sqr(Sum(x, n)));
    plot InertiaTS = a * x + b;
}

plot rsitrend_ma_div = Round(InertiaTS(diff, ntrend), 2);
rsitrend_ma_div.SetLineWeight(1);
rsitrend_ma_div.AssignValueColor(if rsitrend_ma_div > 1 then Color.GREEN
else if rsitrend_ma_div < -1 then Color.RED else Color.GRAY);
#rsitrend_ma_div.Hide();
#rsitrend_ma_div.HideTitle();
AddLabel(yes, if rsitrend_ma_div > 1 then "Trend Up: " + rsitrend_ma_div
else if rsitrend_ma_div < -1 then "Trend Down: " + rsitrend_ma_div else "Trend is flat: " + rsitrend_ma_div, if rsitrend_ma_div > 1 then Color.GREEN
else if rsitrend_ma_div < -1 then Color.RED else Color.GRAY);
