# RSI Divergence
# Drew Griffith

#hint: signal if the rsi is in a divergence using RSI Histogram.

declare lower;

input rsi_length = 14;
input ntrend = 60;
input ma_length = 60;
input rsi_OB = 20;
input rsi_OS = -20;
input trendline = {EMA, SMA, default LRL, WMA};

# global definitions
def hi = high;
def lo = low;
def cl = close;

def rsi = Round(RSI(length = rsi_length, price = cl), 1);
def rsi_ma = Round(ExpAverage(rsi, length = ma_length), 1);
plot diff = Round(rsi - rsi_ma, 0);
diff.SetPaintingStrategy(PaintingStrategy.HISTOGRAM);
diff.SetLineWeight(3);
diff.AssignValueColor(if diff >= rsi_OB then Color.RED else if diff <= rsi_OS then Color.GREEN else Color.GRAY);

plot rsitrend;
switch (trendline) {
case EMA:
    rsitrend = Round(ExpAverage(diff, ntrend), 2);
case SMA:
    rsitrend = Round(Average(diff, ntrend), 2);
case LRL:
    rsitrend = Round(InertiaAll(diff, ntrend), 2);
case WMA:
    rsitrend = Round(WMA(diff, ntrend), 2);
}
rsitrend.SetLineWeight(2);
rsitrend.SetDefaultColor(Color.RED);

# bearish divergence definitions
def hh_long = highest(hi, ntrend);
def hh_medium = highest(hi, (ntrend / 2));
def hc_long = highest(cl, ntrend);
def hc_medium = highest(cl, (ntrend / 2));
def strat_hh_long = Round(highest(diff, ntrend));  #round to nearest whole number
def strat_hh_medium = Round(highest(diff, (ntrend / 2)));  #round to nearest whole number

# looking for ANY bearish divergence
plot dh = if hi[1] == hh_long[1] and cl[1] == hc_long[1] and diff[1] < strat_hh_long[1] and diff[1] >= rsi_OB and diff < diff[1] then diff else Double.NaN;
dh.SetPaintingStrategy(PaintingStrategy.POINTS);
dh.SetLineWeight(3);
dh.AssignValueColor(Color.YELLOW);

# looking for only larger developing bearish divergences
plot dhl = if hi[1] == hh_long[1] and hi[1] == hh_medium[1] and cl[1] == hc_long[1] and cl[1] == hc_medium[1] and strat_hh_long[1] >= rsi_OB and strat_hh_medium[1] >= rsi_OB and strat_hh_long[1] > strat_hh_medium[1] and strat_hh_medium[1] > diff[1] and diff < diff[1] then diff else Double.NaN;
dhl.SetPaintingStrategy(PaintingStrategy.POINTS);
dhl.SetLineWeight(5);
dhl.AssignValueColor(Color.RED);

# bullish divergence definitions
def ll_long = Lowest(lo, ntrend);
def ll_medium = Lowest(lo, (ntrend / 2));
def lc_long = Lowest(cl, ntrend);
def lc_medium = Lowest(cl, (ntrend / 2));
def strat_ll_long = Round(Lowest(diff, ntrend));  #round to nearest whole number
def strat_ll_medium = Round(Lowest(diff, (ntrend / 2)));  #round to nearest whole number

# looking for ANY bullish divergence
plot dl = if lo[1] == ll_long[1] and cl[1] == lc_long[1] and diff[1] > strat_ll_long[1] and diff[1] <= rsi_OS and diff > diff[1] then diff else Double.NaN;
dl.SetPaintingStrategy(PaintingStrategy.POINTS);
dl.SetLineWeight(3);
dl.AssignValueColor(Color.YELLOW);

# looking for only larger developing bullish divergences
plot dll = if lo[1] == ll_long[1] and lo[1] == ll_medium[1] and cl[1] == lc_long[1] and cl[1] == lc_medium[1] and strat_ll_long[1] <= rsi_OS and strat_ll_medium[1] <= rsi_OS and strat_ll_long[1] < strat_ll_medium[1] and strat_ll_medium[1] < diff[1] and diff > diff[1] then diff else Double.NaN;
dll.SetPaintingStrategy(PaintingStrategy.POINTS);
dll.SetLineWeight(5);
dll.AssignValueColor(Color.GREEN);

plot diff_high = rsi_OB;
diff_high.SetDefaultColor(Color.DARK_GRAY);
diff_high.SetLineWeight(1);
diff_high.HideTitle();

plot diff_low = rsi_OS;
diff_low.SetDefaultColor(Color.DARK_GRAY);
diff_low.SetLineWeight(1);
diff_low.HideTitle();

#alert(DHigh, "divergent high", alert.bar, sound.bell);
#alert(DLow, "divergent low", alert.bar, sound.bell);
