# insync
# drew griffith

#hint: mean reversion entry strategy. the strategy is based on closing prices of the day of signal, so buy as close to the eod as possible. the target is the high or open price of the day of entry. ideal hold times are less than 5 days. normally, around day 5, the position moves to breakeven. optimized for use on daily charts.

declare lower;

input os = 70;
input ob = 450;

# global definitions
def hi = high;
def lo = low;
def op = open;
def cl = close;

# study definitions
def bbp_length = 20;
def mfi_length = 14;
def sto_length = 14;
def rsi2_length = 2;
def rsi14_length = 14;

# study calcs
def rsi2 = RSI(length = rsi2_length);
def rsi14 = RSI(length = rsi14_length);
def mfi = MoneyFlowIndex(length = mfi_length);
def sto = StochasticFull("k period" = sto_length);
def bp = BollingerPercentB(length = bbp_length, "average type" = "exponential");
def bbp = if bp >= 100 then 100 else if bp <= 0 then 0 else bp;

# determine price trend for insync signals
plot insync = Round(bbp + rsi2 + rsi14 + mfi + sto, numberofdigits = -1);
plot overbought = ob;
plot oversold = os;
insync.SetLineWeight(2);
## assigning color at the bottom of the script
oversold.AssignValueColor(Color.DARK_GREEN);
oversold.HideTitle();
oversold.HideBubble();
oversold.Hide();
overbought.AssignValueColor(Color.DARK_RED);
overbought.HideTitle();
overbought.HideBubble();
overbought.Hide();

# bullish / bearish divergences
input ntrend = 60;
plot strat_ll = Round(Lowest(insync, ntrend));  #round to nearest whole number
strat_ll.SetDefaultColor(Color.DARK_GRAY);
strat_ll.SetLineWeight(1);
plot strat_hh = Round(Highest(insync, ntrend));  #round to nearest whole number
strat_hh.SetDefaultColor(Color.DARK_GRAY);
strat_hh.SetLineWeight(1);

plot signal;
if insync <= oversold and cl < hl2 {
    signal = 1;
} else if insync >= overbought and cl > hl2 {
    signal = 2;
} else {
    signal = Double.NaN;
}
signal.Hide();
signal.HideTitle();
signal.HideBubble();
signal.SetPaintingStrategy(paintingstrategy = PaintingStrategy.POINTS);
signal.AssignValueColor(Color.YELLOW);

input audiblealerts = no;
Alert(audiblealerts and signal == 1, GetSymbol() + " is extremely oversold: " + insync, Alert.BAR, Sound.Ding);
Alert(audiblealerts and signal == 2, GetSymbol() + " is extremely overbought: " + insync, Alert.BAR, Sound.Ding);

input add_label = YES;
AddLabel(add_label, if signal == 1 then "Extremely Oversold: " + insync else "", Color.GREEN);
AddLabel(add_label, if signal == 2 then "Extremely Overbought: " + insync else "", Color.RED);

input paintbars = yes;
AssignPriceColor(if paintbars and signal between 1 and 4 then Color.YELLOW else Color.CURRENT);

insync.AssignValueColor(if isnan(signal) then Color.gray else if signal between 1 and 2 then Color.YELLOW else Color.CURRENT);

## needed for watchlist box signals
#def signal = insync().signal;
#input add_label = YES;
#AddLabel(add_label, if signal == 1 then signal + ": Oversold EXT" else if signal == 2 then signal + ": Overbought EXT" else "9: Out of Range", Color.BLACK);
## needed for watchlist box painting
#AssignBackgroundColor(if signal == 1 then Color.GREEN else if signal == 2 then Color.RED else Color.GRAY);

plot insync_trend = Round(InertiaAll(insync, ntrend), 0);
insync_trend.SetLineWeight(1);
insync_trend.AssignValueColor(Color.CYAN);
#insync_trend.Hide();
#insync_trend.HideTitle(); 
